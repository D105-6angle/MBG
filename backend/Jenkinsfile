pipeline {
    // 파이프라인이 실행될 젠킨스 에이전트 설정
    // any: 사용 가능한 모든 에이전트에서 실행 가능
    agent any
    
    stages {
        // Git 저장소에서 코드를 가져오는 단계
        stage('Checkout') {
            steps {
                // Jenkins의 SCM(Source Code Management) 설정에 따라 
                // 소스 코드를 체크아웃
                checkout scm
            }
        }
        
        // Gradle을 사용하여 프로젝트를 빌드하는 단계
        stage('Build') {
            steps {
                // backend 디렉토리로 이동
                dir('backend') {
                    // gradlew 파일에 실행 권한 부여
                    sh 'chmod +x ./gradlew'
                    // gradle clean build 명령어 실행
                    // clean: 이전 빌드 결과물 삭제
                    // build: 프로젝트 컴파일, 테스트, JAR 파일 생성
                    sh './gradlew clean build'
                }
            }
        }
        
        // Docker 이미지를 빌드하는 단계
        stage('Docker Build') {
            steps {
                dir('backend') {
                    // 현재 디렉토리의 Dockerfile을 사용하여 
                    // myapp:latest 태그로 도커 이미지 빌드
                    sh 'docker build -t myapp:latest .'
                }
            }
        }
        
        // 애플리케이션을 배포하는 단계
        stage('Deploy') {
            steps {
                dir('backend') {
                    // 기존에 실행 중인 myapp 컨테이너가 있다면 중지
                    // || true를 사용하여 컨테이너가 없어도 에러가 발생하지 않도록 함
                    sh 'docker stop myapp || true'
                    // 중지된 myapp 컨테이너 제거
                    sh 'docker rm myapp || true'
                    // 새로운 컨테이너 실행
                    // -d: 백그라운드 실행
                    // --name myapp: 컨테이너 이름을 myapp으로 설정
                    // -p 8081:8080: 호스트의 8080 포트와 컨테이너의 8080 포트를 연결
                    sh 'docker run -d --name myapp -p 8081:8080 myapp:latest'

                }
            }
        }
    }
}